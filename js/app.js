<<<<<<< HEAD
const users = [
    {
        name: 'Denis',
        age: 33
    },
    {
        name: 'Petr',
        age: 30
    },
    {
        name: 'Viktor',
        age: 39
    }
    ];

    const usersObj = {};

for (let i = 0; i < users.length; i++) {
    usersObj[users[i].name] = users[i];
}
console.log();
=======
// ЦИКЛЫ

// Виды циклов: while, do while, for, for of, for in

// Структура первых трех типов циклов: Итератор (Счётчик) - Условие - Действие

let i = 0; // итератор, обычно он называется i
while(i < 10) { // пока в круглых скобках true цикл в фигурных скобках будет выполнятся
console.log(i);
i++; // вместо i будут подставляться значения от 0 до 9, когда подставиться 10, цикл прекратит свою работу, так как будет false
}

// Короче этот цикл можно записать так но тогда будет в консоли не от 1 до 10, а от 0 до 9


// WHILE
while(i++ < 10) {
    console.log(i);
}

let i = 10; 
while(i--) {
    console.log(i);
} // если сделать в обратную сторону цикл остановит работу, так как 0 в булевом представлении это false

// DO WHILE (в отличие от while сначала произойдёт какое-то действие, а потом он выполнит проверку условия)

do {
    console.log('action'); // сначала пишем что требуется сделать
} while(i > 0); // затем уже условие

// FOR - более универсальный и часто используемый цикл

for (let i = 0; i < 10; i++) { // в круглых скобках сначала инициализация, затем условие, затем шаг
    console.log(i); /* последовательность цикла: единоразово инициализация, затем проверка условия, затем тело цикла (то что в фигурных скобках)
      после тела выполняется увеличения шага, проверка условия, снова тело итд. Пока условие будет правдиво этот цикл будет выполнять наши действия*/
}

let str = 'Hello';
let res = '';

for (let i = 0; i < str.length; i++) {
    console.log(str[i] + '!');
    res += str[i] + '*'; // на каждой атерации будем получать в консоль один символ строки str и с ним мы можем что-то делать, например добавить восклиц. знак, и что угодно
}

let colors = ['white', 'black', 'yellow'];

for (let i = 0; i < 1 colors.length; i++) { // Пример работы цикла с массивом
    colors[i] = colors[i].toUpperCase();
}
console.log(colors);

// Дерективы break и continue

for (let i = 0; i < 10; i++) {
    if (i ===5) {
        continue;// с continue цикл переходит к следующей итерации при условии, что i === 5
    }
    if (i ===5) {
        break; // break прерывает цикл
    }
    console.log(i);
} 

/* В целом, алгоритм работы цикла выглядит следующим образом:

Выполнить *начало*
→ (Если *условие* == true → Выполнить *тело*, Выполнить *шаг*)
→ (Если *условие* == true → Выполнить *тело*, Выполнить *шаг*)
→ (Если *условие* == true → Выполнить *тело*, Выполнить *шаг*)
→ ...

*/

// Перебирание массивов с объектами. 

const users = [
{
    name: 'Alex',
    age: 33
},
{
    name: 'Petr',
    age: 30
},
{
    name: 'Viktor',
    age: 39
}
];

const usersObj = {};

for (let i = 0; i < users.length; i++) 
{
  
usersObj[users[i].name]; // Создание объекта с именем на текущей итерации = users[i];

}

console.log(usersObj['Alex']
    );

    // FOR OF - нужен для перебора объектов

const user = {
    name: Alex,
    age: 30
};

for (let key in user) {
    console.log(key);
console.log(user[key]);}

// FOR OF служит для болеу удобного перебора массивов

for (let value of users) {
    console.log(value);
}
>>>>>>> 432861202396d5a48a8c9c42b3c8a22aa2778fab
